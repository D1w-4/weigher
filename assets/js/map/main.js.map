{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["/**\r\n * Created by dmitrijmihajlov on 26.08.16.\r\n */\r\n\"use strict\"\r\n\r\nvar factory = (function ($) {\r\n    var weightDrag,// ссылка на перемещаемый груз\r\n        weightList = [], // лист всех грузов\r\n        acceleration = 0.005, // ускорение свободного падения грузов\r\n        sizes = [100, 200, 50, 500, 375, 125], // возможные варианты массы груза\r\n        isMobile = typeof document.ontouchstart == 'undefined' ? false : true;// определяем наличие touch интерфейса\r\n\r\n    // добавляем новую анимацию для jQuery\r\n    $.extend($.easing, {\r\n        physics: function (c) {\r\n            return c + (c * acceleration);\r\n        }\r\n    });\r\n    // ================ инициализация ================\r\n    function init() {\r\n        var resizeTimer\r\n        $().ready(function () {\r\n            factory.weight_factory = new weight_factory; // объект управления пушкой\r\n            factory.weigher = new weigher; // объект весов\r\n            $(window).on('resize',function(){\r\n                clearInterval(resizeTimer)\r\n                resizeTimer = setTimeout(function(){\r\n                    weightList.forEach(function(weight){\r\n                        if(!weight.$scalepan){\r\n                            weight.calc_physics()\r\n                        }\r\n                    })\r\n                },100)\r\n            })\r\n            if (!isMobile) {\r\n                // следим за перетаскиванием груза \"weightDrag\", нужен только для этого\r\n                // глобальная слежка за курсором нужна, так как локальный weight.$el.on('mousemove'... работает не так как нужно\r\n                $(document).on('mousemove', function (e) {\r\n                    if (weightDrag) {\r\n                        weightDrag.state = 'question';\r\n                        weightDrag.$el.css({\r\n                            left: e.clientX,\r\n                            top: e.clientY\r\n                        });\r\n                    }\r\n                })\r\n                // mouseup глобален так, как при перемещении груза можно навести на другой элемент и событие не сработает\r\n                $(document).on('mouseup', function (e) {\r\n                    if (weightDrag) {\r\n                        weightDrag.state = 'default'\r\n                        weightDrag.drag = false // запускает анимацию падения\r\n                        weightDrag = null\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    };\r\n    // ================ /инициализация ================\r\n\r\n    // ================ Пушка ================\r\n    function weight_factory() {\r\n        var self = this,\r\n            move = 0;// необходим, для предотвращения выстрела пушки после перемещения груза\r\n        this.$el = $('#weight_factory');\r\n        if (isMobile) {\r\n            // !!перемешение пушки (touchmove) определяеться непосредвенно по ней!!\r\n            this.$el.get(0).addEventListener('touchmove', function (e) {\r\n                self.$el.css({\r\n                    left: e.touches[0].clientX - self.$el.width() / 2\r\n                })\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n            }, false);\r\n            this.$el.get(0).addEventListener('touchend', function (e) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n            })\r\n            document.addEventListener('touchend', function (e) {\r\n                if (self.reload === false) {\r\n                    factory.weight(sizes[Math.floor(Math.random() * sizes.length)])\r\n                    self.reload = true\r\n                }\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }, false)\r\n        }\r\n        else {\r\n            // определяем события перемещения пушки\r\n            $(document).on('mousemove', function (e) {\r\n                move = e.clientX;\r\n                self.$el.css({\r\n                    left: e.clientX - self.$el.width() / 2\r\n                })\r\n            })\r\n            // груз может создаваться по нажатию пробела и лкм\r\n            var createWaiger = function (e) {\r\n                factory.weight(sizes[Math.floor(Math.random() * sizes.length)]);\r\n                self.reload = true;\r\n            }\r\n\r\n            $(document).on('mousedown', function () {\r\n                move = 0;\r\n            })\r\n\r\n            $(document).on('mouseup', function (e) {\r\n                if (self.reload === false && move == 0 && e.originalEvent.button == 0 && weightDrag == null) {\r\n                    createWaiger();\r\n                }\r\n                else {\r\n                    move = 0;\r\n                }\r\n            })\r\n\r\n            $(document).on('keyup', function (e) {\r\n                if (e.keyCode === 32 && self.reload === false) {\r\n                    createWaiger();\r\n                    e.preventDefault();\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    // Биндим свойство объекта на reload, определяет перезарядку пушки\r\n    // Необходимо из-за специфики расчета анимации падения грузка\r\n    Object.defineProperty(weight_factory.prototype, 'reload', {\r\n        get: function () {\r\n            return this.$el.hasClass('reload')\r\n        },\r\n        set: function (value) {\r\n            this.$el.toggleClass('reload', !!value)\r\n        }\r\n    })\r\n    // ================ /Пушка ================\r\n\r\n    // ================ Груз ================\r\n    function weight(size) {\r\n        var self = this\r\n        this.weight = size\r\n        this.$el = $('<div class=\"weight\"></div>')\r\n        this.state = 'default'\r\n        if (isMobile) {\r\n            // работа с перемещением грузка юзером\r\n            // weightDrag используется для сохранения аналогии при работе с курсором, а по факту достаточно self\r\n            this.$el.get(0).addEventListener('touchstart', function (e) {\r\n                if (e.targetTouches.length == 1) {\r\n                    self.drag = true\r\n                    weightDrag = self\r\n                    if (self.$scalepan) {\r\n                        self.$scalepan.trigger('collision.pop', [self])\r\n                    }\r\n                }\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }, false)\r\n            this.$el.get(0).addEventListener('touchmove', function (e) {\r\n                if (weightDrag) {\r\n                    weightDrag.state = 'question'\r\n                    weightDrag.$el.css({\r\n                        left: e.touches[0].clientX,\r\n                        top: e.touches[0].clientY\r\n                    })\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                }\r\n            }, false);\r\n            this.$el.get(0).addEventListener('touchend', function (e) {\r\n                if (weightDrag) {\r\n                    weightDrag.state = 'default'\r\n                    weightDrag.drag = false // запускает анимацию падения\r\n                    weightDrag = null\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                }\r\n            }, false)\r\n        }\r\n        else {\r\n            // работа с перемещением грузка юзером\r\n            this.$el.on('mousedown', function (e) {\r\n                if(e.originalEvent.button == 0){\r\n                    self.drag = true\r\n                    weightDrag = self\r\n                    if (self.$scalepan) {\r\n                        self.$scalepan.trigger('collision.pop', [self])\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        // устанавливаем позицию груза относительно пушки\r\n        this.$el.css({\r\n            left: factory.weight_factory.$el.offset().left - 15 + factory.weight_factory.$el.width() / 2\r\n        })\r\n        // добавляем объект на сцену, кроме этого может находиться внутри чаш весов (weigher_scalepan)\r\n        this.$el.appendTo($('#weigher_main'))\r\n        weightList.push(this)\r\n        // расчет падения груза\r\n        this.calc_physics()\r\n    }\r\n\r\n    Object.defineProperties(weight.prototype, {\r\n        // состояние объекта\r\n        // default - в падении\r\n        // happy - на чаше с большим суммарным весом\r\n        // angry - на чаще с меньшим суммарным весом\r\n        // question - перетаскивание\r\n        // lost - в любом другом месте, после падения\r\n        state: {\r\n            get: function () {\r\n                return this.$el.attr('data-state')\r\n            },\r\n            set: function (value) {\r\n                this.$el.attr('data-state', value)\r\n            }\r\n        },\r\n        // определяем объект столкновения с грузом если не чаши весов то #weigher_main\r\n        get_collision: {\r\n            get: function () {\r\n                var offset = this.$el.offset(),\r\n                    offset_width = this.$el.width(),\r\n                    collision_offset_top = -1,\r\n                    collision = [];\r\n                $('#weigher_scalepan_left, #weigher_scalepan_right').each(function (i, item) {\r\n                    var item_offset = $(this).offset(),\r\n                        item_width = $(this).width()\r\n\r\n                    if (offset.top <= item_offset.top &&\r\n                        (offset.left + offset_width / 2 >= item_offset.left && offset.left <= item_offset.left + item_width) &&\r\n                        (collision_offset_top < item_offset.top || typeof collision == 'undefined')) {\r\n                        //if body\r\n                        collision = $(item)\r\n                    }\r\n                })\r\n                return collision\r\n            }\r\n        },\r\n        // расчет падения груза\r\n        calc_physics: {\r\n            value: function () {\r\n                var fx,\r\n                    top,\r\n                    self = this,\r\n                    offset = this.$el.offset(),\r\n                    collision = this.get_collision;\r\n\r\n                if (collision.length) {\r\n                    top = collision.offset().top + collision.height() - this.$el.height()\r\n                    /* если collision - чаша весов, то после окончания анимации добавляем груз\r\n                       к объекту weigher.scalepan_( left|right )_ar */\r\n\r\n                    fx = function () {\r\n                        collision.trigger('collision.push', [self])\r\n                        // reload пушки в этом случае определяется анимацией весов\r\n                    }\r\n                }\r\n                else {\r\n                    top = $('#weigher_main').height() - this.$el.height()\r\n                    // если collision не определен то бросаем в #weigher_main и меняем картинку груза\r\n                    fx = function () {\r\n                        self.state = 'angry'\r\n                        // анимации #weigher_main нет, сразу перезаряжаем пушку\r\n                        factory.weight_factory.reload = false\r\n                    }\r\n                }\r\n                // останавливаем анимацию весов\r\n                factory.weigher.$scalepan_left.stop()\r\n                factory.weigher.$scalepan_right.stop()\r\n                /* падение пушки с учетом ускорения, необходимо чтобы, на весы и #weigher_main\r\n                   груз падал с одинаковой скоростью */\r\n                this.$el.animate({top: top}, {\r\n                    duration: Math.sqrt((top - offset.top) / acceleration),\r\n                    easing: \"physics\",\r\n                    complete: fx\r\n                })\r\n            }\r\n        },\r\n        // определяем .class при перемещения грузка юзером, запускает анимацию падения\r\n        drag: {\r\n            set: function (value) {\r\n                this.$el.toggleClass('drag', !!value)\r\n                if (!!value == false) {\r\n                    this.calc_physics()\r\n                }\r\n            },\r\n            get: function () {\r\n                return this.$el.hasClass('drag')\r\n            }\r\n        }\r\n    })\r\n    // ================ /Груз ================\r\n\r\n    // ================ Весы ================\r\n    function weigher() {\r\n        var self = this\r\n        this.scalepan_left_ar = [] // грузы левой чаши\r\n        this.scalepan_right_ar = [] // грузы правой чаши\r\n        this.$el = $('#weigher')\r\n        this.$scalepan_left = $('#weigher_scalepan_left')\r\n        this.$scalepan_right = $('#weigher_scalepan_right')\r\n        // расчет конечного веса на обеих чашах\r\n        this.set_scalepan_size = function () {\r\n            var left_size = 0, // вес левой чаши\r\n                right_size = 0 // вес правой чаши\r\n\r\n            function reduct_size(a, b) {\r\n                return a + b.weight\r\n            }\r\n\r\n            if (self.scalepan_right_ar.length)\r\n                right_size = self.scalepan_right_ar.reduce(reduct_size, 0)\r\n            if (self.scalepan_left_ar.length)\r\n                left_size = self.scalepan_left_ar.reduce(reduct_size, 0)\r\n            /* scalepan_size привязан #weigher[data-size]\r\n               нужно чтобы показывать вес через css:content */\r\n            this.scalepan_size = right_size - left_size\r\n        }\r\n        // Вешаем обработчики на добавление и удаление груза из чаш\r\n        $.each(['scalepan_left', 'scalepan_right'], function (key, prop) {\r\n            self['$' + prop].on('collision.push', function (e, weight) {\r\n                self[prop + '_ar'].push(weight)\r\n                weight.$scalepan = $(this)\r\n                self.set_scalepan_size()\r\n                weight.$el.css({\r\n                    top: weight.$el.offset().top - weight.$scalepan.offset().top,\r\n                    left: weight.$el.offset().left - weight.$scalepan.offset().left\r\n                })\r\n                weight.$el.appendTo(weight.$scalepan)\r\n            })\r\n            self['$' + prop].on('collision.pop', function (e, weight) {\r\n                var index = self[prop + '_ar'].indexOf(weight)\r\n                if (index != -1) {\r\n                    weight.$scalepan = null\r\n                    self[prop + '_ar'].splice(index, 1)\r\n                    self.set_scalepan_size()\r\n                    weight.$el.appendTo($('#weigher_main'))\r\n                    weight.$el.css({\r\n                        top: weight.$el.offset().top,\r\n                        left: weight.$el.offset().left\r\n                    })\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    Object.defineProperties(weigher.prototype, {\r\n        // pos определяет в сss с какой стороны весов груз тяжелее\r\n        pos: {\r\n            get: function () {\r\n                return this.$el.attr('data-pos')\r\n            },\r\n            set: function (value) {\r\n                this.$el.attr('data-pos', value)\r\n            }\r\n        },\r\n        // расче веса и анимация весов\r\n        scalepan_size: {\r\n            get: function () {\r\n                return parseInt(this.$el.attr('data-size'))\r\n            },\r\n            set: function (value) {\r\n                var self = this,\r\n                    max_weight = 1000,// определяем максимальный, доступный вес. В реальном проекте был бы в конфигах\r\n                    max_height = $('#weigher').height() / 2, // максимальное смешение чаш\r\n                    weight_coff,// кофф. веса к смешению чаш\r\n                    coff; // смешение чаши по весу\r\n\r\n                weight_coff = max_height / max_weight\r\n                coff = weight_coff * value\r\n                if (value < 0) {\r\n                    // устанавливаем состояние всех грузов на чашах\r\n                    this.scalepan_left_ar.forEach(function (weight) {\r\n                        weight.state = 'happy'\r\n                    })\r\n                    this.scalepan_right_ar.forEach(function (weight) {\r\n                        weight.state = 'lost'\r\n                    })\r\n                    if (this.scalepan_right_ar.length == 0) {\r\n                        coff = -weight_coff * max_weight\r\n                    }\r\n                }\r\n                // если вес на чашах одинаковый\r\n                else if (value == 0) {\r\n                    // устанавливаем состояние всех грузов на чашах\r\n                    this.scalepan_left_ar.forEach(function (weight) {\r\n                        weight.state = 'default'\r\n                    })\r\n                    this.scalepan_right_ar.forEach(function (weight) {\r\n                        weight.state = 'default'\r\n                    })\r\n                }\r\n                else {\r\n                    // устанавливаем состояние всех грузов на чашах\r\n                    this.scalepan_left_ar.forEach(function (weight) {\r\n                        weight.state = 'lost'\r\n                    })\r\n                    this.scalepan_right_ar.forEach(function (weight) {\r\n                        weight.state = 'happy'\r\n                    })\r\n                    if (this.scalepan_left_ar.length == 0) {\r\n                        coff = weight_coff * max_weight\r\n                    }\r\n                }\r\n                /* Если фактический вес превышает max_weight то устанавливаем его как максимум,\r\n                   чтобы весы в небо не улетали */\r\n                if (Math.abs(coff) > weight_coff * max_weight) {\r\n                    coff = weight_coff * max_weight\r\n                    if (value < 0) {\r\n                        coff = -coff\r\n                    }\r\n                }\r\n                this.pos = value < 0 ? 'left' : 'right'\r\n                //Анимируем весы и устанавливаем reload пушки\r\n                this.$scalepan_left.stop().animate({'top': -coff}, 500, function () {\r\n                    factory.weight_factory.reload = false\r\n                })\r\n                this.$scalepan_right.stop().animate({'top': coff}, 500)\r\n                self.$el.attr('data-size', value)\r\n            }\r\n        }\r\n    })\r\n    // ================ /Весы ================\r\n    return {\r\n        init: init,\r\n        weight: function (size) {\r\n            return new weight(size)\r\n        },\r\n    }\r\n/* jQuery объект глобальный, а нам понадобилось добавить свою анимацию. Чтобы не было конфликтов используем noConflict.\r\n   По этой же причине $().ready находиться в factory.init */\r\n})(jQuery.noConflict(true))\r\n\r\nfactory.init()"],"file":"main.js","sourceRoot":"/source/"}